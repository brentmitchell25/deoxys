AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ApiNameapi:
    Properties:
      Name: ApiName
    Type: AWS::ApiGateway::RestApi
  AwesomeFunction0Poller:
    DependsOn: [AwesomeFunctionlambda]
    Properties:
      Description: AwesomeFunction Poller
      Name: AwesomeFunction-0-Poller
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
      - Arn: !GetAtt [AwesomeFunctionlambda, Arn]
        Id: AwesomeFunction
    Type: AWS::Events::Rule
  AwesomeFunction0PollerPermission:
    DependsOn: [AwesomeFunction0Poller, AwesomeFunctionlambda]
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'AwesomeFunctionlambda'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [AwesomeFunction0Poller, Arn]
    Type: AWS::Lambda::Permission
  AwesomeFunctionWithJsonInput0Poller:
    DependsOn: [AwesomeFunctionWithJsonInputlambda]
    Properties:
      Description: AwesomeFunctionWithJsonInput Poller
      Name: AwesomeFunctionWithJsonInput-0-Poller
      ScheduleExpression: cron(0 12 * * ? *)
      State: ENABLED
      Targets:
      - Arn: !GetAtt [AwesomeFunctionWithJsonInputlambda, Arn]
        Id: AwesomeFunctionWithJsonInput
        Input: '{"Test1": "Test Input 1", "Test2": "Test Input 2"}'
    Type: AWS::Events::Rule
  AwesomeFunctionWithJsonInput0PollerPermission:
    DependsOn: [AwesomeFunctionWithJsonInput0Poller, AwesomeFunctionWithJsonInputlambda]
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'AwesomeFunctionWithJsonInputlambda'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [AwesomeFunctionWithJsonInput0Poller, Arn]
    Type: AWS::Lambda::Permission
  AwesomeFunctionWithJsonInputTestPollerNamePoller:
    DependsOn: [AwesomeFunctionWithJsonInputlambda]
    Properties:
      Description: AwesomeFunctionWithJsonInput Poller
      Name: AwesomeFunctionWithJsonInput-TestPollerName-Poller
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
      - Arn: !GetAtt [AwesomeFunctionWithJsonInputlambda, Arn]
        Id: AwesomeFunctionWithJsonInput
        Input: '{"Test3": "Test Input 3", "Test4": "Test Input 4"}'
    Type: AWS::Events::Rule
  AwesomeFunctionWithJsonInputTestPollerNamePollerPermission:
    DependsOn: [AwesomeFunctionWithJsonInputTestPollerNamePoller, AwesomeFunctionWithJsonInputlambda]
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'AwesomeFunctionWithJsonInputlambda'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [AwesomeFunctionWithJsonInputTestPollerNamePoller, Arn]
    Type: AWS::Lambda::Permission
  AwesomeFunctionWithJsonInputlambda:
    Properties:
      Code:
        S3Bucket: lambda-bucket
        S3Key: test.zip
      Description: Polling cron with JSON input
      Environment:
        Variables:
          VARIABLE_1: Some environement variable
          VARIABLE_2: Another environment variable
      FunctionName: AwesomeFunctionWithJsonInput
      Handler: index.handler
      MemorySize: 256
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/TestRoleName'
      Runtime: nodejs6.10
      Timeout: '60'
      VpcConfig:
        SecurityGroupIds: [sg-********, sg-********]
        SubnetIds: [subnet-********, subnet-********, subnet-********]
    Type: AWS::Lambda::Function
  AwesomeFunctionlambda:
    Properties:
      Code:
        ZipFile: 'exports.handler = (event, context, callback) => {

          console.log(JSON.stringify(event));

          callback(null, "some success message");

          };'
      Description: Creates a new RestApi
      FunctionName: AwesomeFunction
      Handler: index.handler
      MemorySize: 128
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/TestRoleName'
      Runtime: nodejs6.10
      Timeout: '10'
    Type: AWS::Lambda::Function
  abcdefg127f25ac7bbac24cd6b20a1783145b5e38Deployment:
    DependsOn: [testGETMethod]
    Properties:
      RestApiId: abcdefg12
      StageName: dev
    Type: AWS::ApiGateway::Deployment
  testGETMethod:
    DependsOn: [testPath]
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - StatusCode: '200'
        RequestTemplates:
          application/json: '{

            "param1": "$input.params(''param1'')",

            "param2": "$input.params(''param2'')",

            "param3": "$input.params(''param3'')"

            }'
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AwesomeFunctionlambda.Arn}/invocations'
      MethodResponses:
      - StatusCode: '200'
      RequestParameters:
        method.request.querystring.param1: false
        method.request.querystring.param2: false
        method.request.querystring.param3: false
      ResourceId: !Ref 'testPath'
      RestApiId: !Ref 'ApiNameapi'
    Type: AWS::ApiGateway::Method
  testGETPathPermission:
    DependsOn: [ApiNameapi, AwesomeFunctionlambda, testGETMethod]
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'AwesomeFunctionlambda'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiNameapi}/*/GET/test'
    Type: AWS::Lambda::Permission
  testPath:
    DependsOn: [ApiNameapi]
    Properties:
      ParentId: !GetAtt [ApiNameapi, RootResourceId]
      PathPart: test
      RestApiId: !Ref 'ApiNameapi'
    Type: AWS::ApiGateway::Resource
  troposphereRefobjectat0x03A06750bd81fc31856741a7b2b38052907d77f9Deployment:
    DependsOn: [testGETMethod]
    Properties:
      RestApiId: !Ref 'ApiNameapi'
      StageName: dev
    Type: AWS::ApiGateway::Deployment
