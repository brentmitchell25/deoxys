[DEFAULT]
WriteFileDirectory = /tmp/

CloudformationBucket = TODO
# Environments = dev,uat,prod

# Lambda
Timeout = 10
Handler = index.handler
Code: exports.handler = (event, context, callback) => {
                  console.log(JSON.stringify(event));
                  callback(null, "some success message");
                };
LambdaSecurityGroupIds = sg-********,sg-********
LambdaSubnetIds = subnet-********,subnet-********,subnet-********
LambdaRuntime = nodejs6.10
LambdaMemorySize = 128

# Dynamo
ReadCapacityUnits = 1
WriteCapacityUnits = 1
AttributeType = S
StreamViewType = NEW_AND_OLD_IMAGES
TimeToLiveSpecification = TTL
TimeToLiveSpecificationEnabled = True

# Streams
StartingPosition = LATEST

# SQS
MessageRetentionPeriod = 604800
ReceiveMessageWaitTimeSeconds = 0
MaxReceiveCount = 5

# KMS
KmsEnabled = True
KmsEnableKeyRotation = False

# IAM
Path = /

# API Gateway
AuthorizationType = AWS_IAM
QueryStringRequired = False
BodyMappingTemplate : ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
    ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
    #set($allParams = $input.params())
    {
    "body-json" : $input.json('$'),
    "params" : {
    #foreach($type in $allParams.keySet())
        #set($params = $allParams.get($type))
    "$type" : {
        #foreach($paramName in $params.keySet())
        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
            #if($foreach.hasNext),#end
        #end
    }
        #if($foreach.hasNext),#end
    #end
    },
    "stage-variables" : {
    #foreach($key in $stageVariables.keySet())
    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
        #if($foreach.hasNext),#end
    #end
    },
    "context" : {
        "account-id" : "$context.identity.accountId",
        "api-id" : "$context.apiId",
        "api-key" : "$context.identity.apiKey",
        "authorizer-principal-id" : "$context.authorizer.principalId",
        "caller" : "$context.identity.caller",
        "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
        "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
        "cognito-identity-id" : "$context.identity.cognitoIdentityId",
        "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
        "http-method" : "$context.httpMethod",
        "stage" : "$context.stage",
        "source-ip" : "$context.identity.sourceIp",
        "user" : "$context.identity.user",
        "user-agent" : "$context.identity.userAgent",
        "user-arn" : "$context.identity.userArn",
        "request-id" : "$context.requestId",
        "resource-id" : "$context.resourceId",
        "resource-path" : "$context.resourcePath"
        }
    }